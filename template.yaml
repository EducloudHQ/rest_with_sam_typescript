AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless patterns - Amazon API Gateway to AWS Lambda to Amazon DynamoDB

Parameters:

  TableName:
    Type: String
    Description: Dynamodb table name.

Globals:
  Function:
    Runtime: nodejs14.x
    Architectures:
      - x86_64
    CodeUri: src/
    Environment:
      Variables:
        TABLE_NAME: !Ref TableName

  Api:
    EndpointConfiguration: REGIONAL
    TracingEnabled: True
    Cors:
      AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin:  "'*'"

Resources:
  WeatherApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev

  CreateWeather:
    Type: AWS::Serverless::Function
    Description: 'Lambda function inserts data into DynamoDB table'
    Properties:
      FunctionName: TypescriptCreateWeatherItem
      Handler: createWeather.lambdaHandler
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /create-weather
            Method: POST
            RestApiId: !Ref WeatherApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints: 
        - createWeather.ts

  GetWeatherFunction:
    Type: AWS::Serverless::Function
    Description: 'Lambda function to retrieve all weather items from DynamoDB table'
    Properties:
      FunctionName: TypescriptGetWeatherItems
      Handler: getAllWeather.lambdaHandler
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref WeatherApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints: 
        - getAllWeather.ts
            
  DeleteWeatherFunction:
    Type: AWS::Serverless::Function
    Description: 'Lambda function remove weather item from DynamoDB table'
    Properties:
      FunctionName: TypescriptDeleteWeatherItem
      Handler: deleteWeather.lambdaHandler
      Policies:
        
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref WeatherApi
            Path: /delete-weather/{id}
            Method: DELETE 
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints: 
        - deleteWeather.ts 

  UpdateLambdaFunction:
    Type: AWS::Serverless::Function
    Description: 'Lambda function updates weather item in DynamoDB table'
    Properties:
      FunctionName: TypescriptUpdateWeatherItem
      Handler: updateWeather.lambdaHandler
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref WeatherApi 
            Path: /update-weather/{id}
            Method: PUT 
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints:
        - updateWeather.ts
Outputs:
  EndpointUrl:
    Description: 'HTTP REST endpoint URL'
    Value: !Sub 'https://${WeatherApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
