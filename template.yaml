AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless patterns - Amazon API Gateway to AWS Lambda to Amazon DynamoDB

Parameters:
  TableName:
    Type: String
    Description: Dynamodb table name.

Globals:
  Function:
    Runtime: nodejs14.x
    Architectures:
      - x86_64
    CodeUri: src/
    Environment:
      Variables:
        TABLE_NAME: !Ref WeatherTable

  Api:
    EndpointConfiguration: REGIONAL
    TracingEnabled: True
    Cors:
      AllowMethods: "'OPTIONS,POST,GET,PUT,DELETE'"
      AllowHeaders: "'Content-Type'"
      AllowOrigin:  "'*'"

Resources:
  WeatherApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
<<<<<<< HEAD

  CreateWeather:
    Type: AWS::Serverless::Function
    Description: 'Lambda function inserts data into DynamoDB table'
    Properties:
      FunctionName: TypescriptCreateWeatherItem
      Handler: createWeather.lambdaHandler
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /create-weather
            Method: POST
            RestApiId: !Ref WeatherApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints: 
        - createWeather.ts

  GetWeatherFunction:
    Type: AWS::Serverless::Function
    Description: 'Lambda function to retrieve all weather items from DynamoDB table'
    Properties:
      FunctionName: TypescriptGetWeatherItems
      Handler: getAllWeather.lambdaHandler
      Policies:
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref WeatherApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints: 
        - getAllWeather.ts
            
  DeleteWeatherFunction:
    Type: AWS::Serverless::Function
    Description: 'Lambda function remove weather item from DynamoDB table'
    Properties:
      FunctionName: TypescriptDeleteWeatherItem
      Handler: deleteWeather.lambdaHandler
      Policies:
        
        - AmazonDynamoDBFullAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoDBTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref WeatherApi
            Path: /delete-weather/{id}
            Method: DELETE 
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints: 
        - deleteWeather.ts 
=======
      Description: serverless api for weather application
>>>>>>> update

  GetWeather:
    Type: AWS::Serverless::Function
    Description: 'Lambda function inserts weather data into DynamoDB table'
    Properties:
      FunctionName: TypescriptGetWeatherItem
      Handler: getWeatherItem.lambdaHandler
      Policies:
        DynamoDBCrudPolicy:
          TableName: !Ref WeatherTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /weather/{id}
            Method: GET
            RestApiId: !Ref WeatherApi
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        EntryPoints: 
<<<<<<< HEAD
        - updateWeather.ts
<<<<<<< HEAD
Outputs:
  EndpointUrl:
    Description: 'HTTP REST endpoint URL'
    Value: !Sub 'https://${WeatherApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
=======
=======
        - getWeatherItem.ts
>>>>>>> get
        
  WeatherTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  WeatherApi:
    Description: "API Gateway endpoint URL for dev stage for create weather function"
    Value: !Sub "https://${WeatherApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"
  CreateWeatherFunction:
    Description: "Create Weather Lambda Function ARN"
<<<<<<< HEAD
    Value: !GetAtt UpdateWeather.Arn
>>>>>>> update
=======
    Value: !GetAtt GetWeather.Arn
>>>>>>> get
